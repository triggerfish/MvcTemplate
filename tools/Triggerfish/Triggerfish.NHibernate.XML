<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Triggerfish.NHibernate</name>
    </assembly>
    <members>
        <member name="T:Triggerfish.NHibernate.Validator.ValidatorExtensions">
            <summary>
            Extension methods for validation errors
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Validator.ValidatorExtensions.ToValidationException(NHibernate.Validator.Exceptions.InvalidStateException)">
            <summary>
            Constructs a ValidationException based on a NHibernate.Validator InvalidStateException
            </summary>
            <param name="exception">The exception received from NHibernate.Validator</param>
            <returns>A ValidationException object</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.Validator.ValidatorExtensions.ToValidationException(NHibernate.Validator.Engine.InvalidValue[])">
            <summary>
            Constructs a ValidationException based on NHibernate.Validator InvalidValue objects.
            </summary>
            <param name="errors">The errors received from NHibernate.Validator</param>
            <returns>A ValidationException or null if there are no errors</returns>
        </member>
        <member name="T:Triggerfish.NHibernate.Repository">
            <summary>
            Represents an NHibernate repository
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.#ctor(NHibernate.ISession)">
            <summary>
            Constructor
            </summary>
            <param name="session">A NHibernate session</param>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.Get``1(System.Int32)">
            <summary>
            Get an object from the objects ID
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="id">Object ID</param>
            <returns>The object</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.GetAll``1">
            <summary>
            Get a queryable list of objects
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>The objects</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.Delete``1(``0)">
            <summary>
            Deletes an object from the repository
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="target">the object</param>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.Save``1(``0)">
            <summary>
            Saves or updates an object to the repository
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="target">The object to save or update</param>
        </member>
        <member name="M:Triggerfish.NHibernate.Repository.Save``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves or updates a list of objects to the repository
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="targets">The list of objects to save or update</param>
        </member>
        <member name="P:Triggerfish.NHibernate.Repository.Session">
            <summary>
            The NHibernate session
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.SqliteDatabase">
            <summary>
            Sqlite database configuration
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.IDatabaseConfiguration">
            <summary>
            Interface for an NHibernate database configuration
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.IDatabaseConfiguration.Create(System.Reflection.Assembly)">
            <summary>
            Returns the FluentNHibernate database configuration data
            </summary>
            <param name="assembly">The assembly containing the mappings</param>
            <returns>Database configuration</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.SqliteDatabase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">The path and name of the SQLite database file</param>
        </member>
        <member name="M:Triggerfish.NHibernate.SqliteDatabase.Triggerfish#NHibernate#IDatabaseConfiguration#Create(System.Reflection.Assembly)">
            <summary>
            Returns the FluentNHibernate Sqlite configuration data
            </summary>
            <param name="assembly">The assembly containing the mappings</param>
            <returns>SQLite configuration</returns>
        </member>
        <member name="T:Triggerfish.NHibernate.SQLlogger">
            <summary>
            Logs to log4net SQL commands executed by NHibernate
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.SQLlogger.Append(log4net.Core.LoggingEvent)">
            <summary>
            Append a logging event to the log
            </summary>
            <param name="loggingEvent">The logging event</param>
        </member>
        <member name="P:Triggerfish.NHibernate.SQLlogger.Log">
            <summary>
            Setter method for the stream to write the SQL commands to
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.SqlServerModule">
            <summary>
            SQL Server database configuration
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.SqlServerModule.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">The path to the server</param>
            <param name="database">The name of the database</param>
        </member>
        <member name="M:Triggerfish.NHibernate.SqlServerModule.Triggerfish#NHibernate#IDatabaseConfiguration#Create(System.Reflection.Assembly)">
            <summary>
            Returns the FluentNHibernate SQL Server configuration data
            </summary>
            <param name="assembly">The assembly containing the mappings</param>
            <returns>SQL Server configuration</returns>
        </member>
        <member name="T:Triggerfish.NHibernate.Configuration">
            <summary>
            NHibernate configuration
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Configuration.#ctor(Triggerfish.NHibernate.IDatabaseConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="database">The database configuration object</param>
        </member>
        <member name="M:Triggerfish.NHibernate.Configuration.Create``1">
            <summary>
            Create the configuration
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Configuration.CreateValidator">
            <summary>
            Create the NHibernate ValidatorEngine
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Configuration.SetValidatorEngineProperties(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sets the properties of the NHibernate validator engine
            </summary>
            <param name="properties">Dictionary of properties</param>
        </member>
        <member name="P:Triggerfish.NHibernate.Configuration.Config">
            <summary>
            The FluentNHibernate configuration
            </summary>
        </member>
        <member name="P:Triggerfish.NHibernate.Configuration.Validator">
            <summary>
            The validator engine
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.Validator.Validator">
            <summary>
            Invokes the NHibernate.Validator validation runner
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.Validator.Validator.#ctor(NHibernate.Validator.Engine.ValidatorEngine)">
            <summary>
            Constructor
            </summary>
            <param name="engine">The NHibernate.Validator validation engine</param>
        </member>
        <member name="M:Triggerfish.NHibernate.Validator.Validator.Validate(System.Object)">
            <summary>
            Validate the specified object. Should throw a ValidationException if the 
            object is invalid
            </summary>
            <param name="obj">The object to validate</param>
        </member>
        <member name="T:Triggerfish.NHibernate.UnitOfWork">
            <summary>
            Encapsulates an NHibernate session and transaction
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWork.#ctor(NHibernate.ISession)">
            <summary>
            Constructor
            </summary>
            <param name="session">A NHibernate session</param>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWork.Begin">
            <summary>
            Begins the unit of work (transaction)
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWork.End">
            <summary>
            Ends the unit of work (transaction). The default behaviour 
            should be to rollback and close any sessions. Commits 
            should only occur by explicit invocation of Commit()
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWork.Commit">
            <summary>
            Commits the data changes made in the unit of work (transaction)
            </summary>
        </member>
        <member name="P:Triggerfish.NHibernate.UnitOfWork.Session">
            <summary>
            The underlying NHibernate session
            </summary>
        </member>
        <member name="P:Triggerfish.NHibernate.UnitOfWork.IsActive">
            <summary>
            Returns trus if the unit of work is active, false if not
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.WebSessionStorage">
            <summary>
            Stores UnitOfWork objects in the current HttpContext
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.WebSessionStorage.GetCurrentUnitOfWork">
            <summary>
            Gets the current unit of work
            </summary>
            <returns>The current IUnitOfWork</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.WebSessionStorage.SetCurrentUnitOfWork(Triggerfish.Database.IUnitOfWork)">
            <summary>
            Sets a new unit of work as the current
            </summary>
            <param name="uow">A new IUnitOfWork</param>
        </member>
        <member name="M:Triggerfish.NHibernate.WebSessionStorage.DeleteCurrentUnitOfWork">
            <summary>
            Deletes the current unit of work
            </summary>
        </member>
        <member name="T:Triggerfish.NHibernate.UnitOfWorkFactory">
            <summary>
            Factory class to manage UnitOfWork objects and NHibernate sessions
            </summary>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.Initialise(FluentNHibernate.Cfg.FluentConfiguration)">
            <summary>
            Initialiser method
            </summary>
            <param name="config">The fluent NHibernate configuration from which to build a session factory</param>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.Initialise(FluentNHibernate.Cfg.FluentConfiguration,Triggerfish.Database.IUnitOfWorkStorage)">
            <summary>
            Initialiser method
            </summary>
            <param name="config">The fluent NHibernate configuration from which to build a session factory</param>
            <param name="storage">The storage mechanism to use</param>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.Initialise(NHibernate.ISessionFactory,Triggerfish.Database.IUnitOfWorkStorage)">
            <summary>
            Initialiser method
            </summary>
            <param name="factory">ISessionFactory interface instance</param>
            <param name="storage">IUnitOfWorkStorage interface instance</param>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.GetCurrentSession">
            <summary>
            Gets the current open session
            </summary>
            <returns>An ISession</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.GetCurrentUnitOfWork">
            <summary>
            Gets the current unit of work
            </summary>
            <returns>The current unit of work object</returns>
        </member>
        <member name="M:Triggerfish.NHibernate.UnitOfWorkFactory.CloseCurrentUnitOfWork">
            <summary>
            Closes the unit of work currently open
            </summary>
        </member>
    </members>
</doc>
